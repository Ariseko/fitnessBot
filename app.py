from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher, FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils import executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

import sqlite3 as sq

files_list = (1, 6, 13, 71, 80)

base = sq.connect('quest.db')
cursor = base.cursor()
base.execute('CREATE TABLE IF NOT EXISTS answers (id INTEGER PRIMARY KEY AUTOINCREMENT,'
             'parent_id INTEGER,'
             'title TEXT,'
             'message_text TEXT,'
             'file TEXT)')
base.execute('CREATE TABLE IF NOT EXISTS states (id INTEGER, node_id INTEGER)')
base.commit()

storage = MemoryStorage()
bot = Bot(token='5780779424:AAHqlAMKzVkYM7fYek89Mxnx7HyPD3GJXzc')
dp = Dispatcher(bot, storage=MemoryStorage())


class FSMtest(StatesGroup):
    zero_consult = State()
    consult_first = State()
    consult_second = State()

    parent_id = State()
    title = State()
    message_text = State()

    start_edit = State()
    edit_choose = State()
    edit_content = State()
    edit_commit = State()

    show_message = State()

    delete_start = State()
    delete_get_id = State


@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    photo = open('files/zero.jpg', 'rb')
    existion = bool(
        cursor.execute(f'SELECT EXISTS(SELECT id FROM states WHERE id = {message.from_user.id})').fetchone()[0])

    start_message = cursor.execute(f'SELECT message_text FROM answers WHERE id = 0').fetchone()[0]

    start_button = '–ê–±–æ–Ω–µ–º–µ–Ω—Ç –≤ –∑–∞–ª'
    start_dialog = ReplyKeyboardMarkup(resize_keyboard=True)
    start_dialog.add(start_button)

    if existion is True:
        await message.answer('üîπ _–ü–æ–¥–ø–∏—à–∏—Å—å_ –Ω–∞ –∫–∞–Ω–∞–ª –≤ —Ç–µ–ª–µ–≥–µ - https://t.me/+EAi2GUBEB7JlY2Qy \n'
                             'üîπ–í –Ω–µ–º –º–Ω–æ–≥–æ –ø–æ–ª–µ–∑–Ω–æ–π –∏–Ω—Ñ—ãüîù')
        await bot.send_photo(message.chat.id, photo=photo)
        await message.answer(start_message, reply_markup=start_dialog)
        cursor.execute(f'UPDATE states SET node_id = 0 WHERE id = {message.from_user.id}')
        base.commit()
    else:
        cursor.execute(f'INSERT INTO states (id, node_id) VALUES ({message.from_user.id}, 0)')
        base.commit()
        await bot.send_photo(message.chat.id, photo=photo)
        await message.answer(start_message, reply_markup=start_dialog)


@dp.message_handler(state=FSMtest.consult_first)
async def first_consult(messsage: types.Message, state: FSMContext):
    if messsage.text == '–ü–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é':
        await messsage.answer('–û—Ç–ª–∏—á–Ω–æ! –¢–æ–≥–¥–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –í–∞—à–µ '
                              '–ò–º—è, –≤–æ–∑—Ä–∞—Å—Ç, –≥–ª–∞–≤–Ω—É—é —Ñ–∏—Ç–Ω–µ—Å —Ü–µ–ª—å –∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞'
                              '\n\n–ü—Ä–∏–º–µ—Ä:'
                              '\n\n–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á'
                              '\n–•–æ—á—É —Å–±—Ä–æ—Å–∏—Ç—å –≤–µ—Å'
                              '\n28 –ª–µ—Ç')
        await FSMtest.consult_second.set()
    else:
        restart_kb = ReplyKeyboardMarkup(resize_keyboard=True)
        restart_btn = KeyboardButton('/start')
        restart_kb.add(restart_btn)
        await messsage.answer('–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É', reply_markup=restart_kb)
        await state.finish()


@dp.message_handler(state=FSMtest.consult_second)
async def second_consult(message: types.Message, state: FSMContext):
    zayavka = f'@{message.from_user.username}\n' \
              f'{message.text}'

    restart_kb = ReplyKeyboardMarkup(resize_keyboard=True)
    restart_btn = KeyboardButton('/start')
    restart_kb.add(restart_btn)

    await bot.send_message(337652760, zayavka)
    await message.answer('–û—Ç–ª–∏—á–Ω–æ! –í–∞—à —Ç—Ä–µ–Ω–µ—Ä –≤ —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è.'
                         '–ê –ø–æ–∫–∞ –º–æ–∂–µ—Ç–µ –ø—Ä–æ–π—Ç–∏ –∏–≥—Ä—É –∑–∞–Ω–æ–≤–æ', reply_markup=restart_kb)

    await state.finish()


@dp.message_handler(commands=['new'])
async def start_insert(message: types.Message):
    await FSMtest.parent_id.set()
    await message.answer(f'id —Ä–æ–¥–∏—Ç–µ–ª—è')


@dp.message_handler(commands=['edit'])
async def edit(message: types.Message):
    await FSMtest.start_edit.set()
    await message.answer('–í–≤–µ–¥–∏ id —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—á–µ—à—å –ø–æ–ø—Ä–∞–≤–∏—Ç—å')


@dp.message_handler(commands=['show'])
async def start_show(message: types.Message):
    await FSMtest.show_message.set()
    await message.answer('–í–≤–µ–¥–∏ id —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—á–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å')


@dp.message_handler(commands=['delete'])
async def delete(message: types.Message):
    delete_kb = ReplyKeyboardMarkup(resize_keyboard=True)
    delete_yes_btn = KeyboardButton('–î–∞')
    delete_no_btn = KeyboardButton('–ù–µ—Ç')

    delete_kb.add(delete_yes_btn).add(delete_no_btn)
    await message.answer('–ü—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏, –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –∏–¥—É—Ç –ø–æ—Å–ª–µ –Ω–µ–≥–æ'
                         ' –±—É–¥—É—Ç –∏–¥—Ç–∏ –ø–æ—Å–ª–µ —Ä–æ–¥–∏—Ç–µ–ª—è —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, —Ç—ã —Ç–æ—á–Ω–æ —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å?',
                         reply_markup=delete_kb)
    await FSMtest.delete_start.set()


@dp.message_handler(state=FSMtest.delete_start)
async def delete_start(message: types.Message, state: FSMContext):
    if message.text == '–î–∞':
        await message.answer('–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è')
        await FSMtest.next()
    else:
        await message.answer('–û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏')
        await state.finish()


@dp.message_handler(state=FSMtest.delete_get_id)
async def delete_procceed(message: types.Message, state: FSMContext):
    await message.answer('–°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª—è–µ—Ç—Å—è...')
    list_of_deleted_childs = cursor.execute(f'select id from answers where parent_id = {message.text}').fetchall()


# ##########################################################################################################################

@dp.message_handler(state=FSMtest.show_message)
async def show(message: types.Message, state: FSMContext):
    message_to_show = cursor.execute(f'SELECT * FROM answers WHERE id = {message.text}').fetchone()
    await message.answer(f'id: {message_to_show[0]}\n'
                         f'id —Ä–æ–¥–∏—Ç–µ–ª—è: {message_to_show[1]}\n'
                         f'–ö–Ω–æ–ø–∫–∞: {message_to_show[2]}\n'
                         f'–¢–µ–∫—Å—Ç: {message_to_show[3]}')
    # print(message_to_show)
    await state.finish()


# ##########################################################################################################################


@dp.message_handler(state=FSMtest.parent_id)
async def get_parents_id(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        try:
            data['parent_id'] = int(message.text)
            await message.answer('–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏')
        except():
            await message.answer('Error')

    await FSMtest.title.set()


@dp.message_handler(state=FSMtest.title)
async def get_title(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        try:
            data["title"] = message.text
            await message.answer("–í–≤–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        except():
            await message.answer('Error')

    await FSMtest.message_text.set()


@dp.message_handler(state=FSMtest.message_text)
async def get_message(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['message_text'] = message.text
        await message.answer(f"–∫–Ω–æ–ø–∫–∞{data['title']}")
        cursor.execute(f'INSERT INTO answers(parent_id, title, message_text, file) VALUES (?, ?, ?, NULL)',
                       tuple(data.values()))
        base.commit()
        addedMessageId = cursor.execute(
            f'SELECT id from answers where parent_id = {data["parent_id"]} and title = "{data["title"]}"').fetchone()
        await message.answer(f'id –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è {addedMessageId}')

    await state.finish()


# ##########################################################################################################################

@dp.message_handler(state=FSMtest.start_edit)
async def fork(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['id'] = int(message.text)

    edit_kb = ReplyKeyboardMarkup(resize_keyboard=True)
    edit_parent_id_btn = KeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–¥–∏—Ç–µ–ª—è')
    edit_title_btn = KeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å –∫–Ω–ø–æ–∫—É')
    edit_text_btn = KeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç')
    edit_kb.add(edit_parent_id_btn).add(edit_title_btn).add(edit_text_btn)

    await message.answer('–í—ã–±–µ—Ä–∏ —á—Ç–æ —Ö–æ—á–µ—à—å –æ—Ç—Ä–µ–¥–∞—á–∏—Ç—å', reply_markup=edit_kb)
    await FSMtest.edit_choose.set()


@dp.message_handler(state=FSMtest.edit_choose)
async def edit_choose(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['change_object'] = message.text
    await FSMtest.edit_content.set()
    await message.answer('–ù–∞ —á—Ç–æ –ø–æ–º–µ–Ω—è—Ç—å?')


@dp.message_handler(state=FSMtest.edit_content)
async def edit_content(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        try:
            if data['change_object'] == '–ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–¥–∏—Ç–µ–ª—è':
                cursor.execute(f'UPDATE answers SET parent_id = {int(message.text)} WHERE id = {data["id"]}')
                base.commit()
            elif data['change_object'] == '–ò–∑–º–µ–Ω–∏—Ç—å –∫–Ω–ø–æ–∫—É':
                cursor.execute(f'UPDATE answers SET title = "{message.text}" WHERE id = {data["id"]}')
                base.commit()
            elif data['change_object'] == '–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç':
                cursor.execute(f'UPDATE answers SET message_text = "{message.text}" WHERE id = {data["id"]}')
                base.commit()

            await state.finish()

        except:
            await message.answer('–ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –Ω–∞–ø–∏—à–∏ –ë–∞—Å–µ')
            await state.finish()


@dp.message_handler()
async def handler(message: types.Message):
    dialog = ReplyKeyboardMarkup(resize_keyboard=True)
    previous_node_id = cursor.execute(f'SELECT node_id FROM states WHERE id = {message.from_user.id}').fetchone()[0]
    current_node = cursor.execute(
        f"SELECT * FROM answers WHERE parent_id = {previous_node_id} and title = '{message.text}'").fetchall()[0]
    message_text = current_node[3]
    next = current_node[0]
    next_nodes = cursor.execute(f'SELECT * FROM answers WHERE parent_id = {next}').fetchall()

    for item in next_nodes:
        dialog.add(item[2])

    if current_node[0] == 1:
        photo = open('files/first.jpg', 'rb')
        await bot.send_photo(message.chat.id, photo=photo)
    elif current_node[0] == 2:
        photo = open('files/second.jpg', 'rb')
        await bot.send_photo(message.chat.id, photo=photo)

    if len(next_nodes) != 0:
        await message.answer(message_text, reply_markup=dialog)
        next_node_id = current_node[0]
        cursor.execute(f'UPDATE states SET node_id = {next_node_id} WHERE id = {message.from_user.id}')
        base.commit()
    elif len(next_nodes) == 0:
        consult_kb = ReplyKeyboardMarkup(resize_keyboard=True)
        consult_btn_0 = KeyboardButton('–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ')
        consult_btn_1 = KeyboardButton('–ü–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é')
        consult_kb.add(consult_btn_0).add(consult_btn_1)
        await message.answer(message_text, reply_markup=consult_kb)
        next_node_id = current_node[0]
        cursor.execute(f'UPDATE states SET node_id = {next_node_id} WHERE id = {message.from_user.id}')
        base.commit()
        await FSMtest.consult_first.set()

    if current_node[0] in files_list:
        await message.reply_document(open(f'files/{current_node[0]}.pdf', 'rb'),
                                     caption='–°–æ—Ö—Ä–∞–Ω–∏ —Å–µ–±–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ, —á—Ç–æ–± –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—åüòâ')


executor.start_polling(dp, skip_updates=True)
